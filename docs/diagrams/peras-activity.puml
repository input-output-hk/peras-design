@startuml
title Peras Activity at the Node
start
while (Exit?)
  switch (Wait for event)
    case (New slot)
      if (Am I a slot leader?) then (yes)
        group Select votes
          repeat :Consider each dangling vote;
            if (Is vote expired?) then (yes)
              :Discard vote;
            else (no)
              if (Is vote for block\non preferred chain?) then (yes)
                if (Is vote already included\non preferred chain?) then (no)
                  if (Is an equivocation?) then (yes)
                    :Discard vote;
                  else (no)
                    :Add vote to block;
                  endif
                else (yes)
                  :Discard vote;
                endif
              else (no)
                :Keep as a\ndangling vote;
              endif
            endif
          repeat while (More dangling votes to consider?) is (yes)
        end group
        :Add block to preferred chain;
        :Send preferred chain to downstream peers;
      else (no)
      endif
    case (New round) 
      group (Determine last quorum)
        :Iterate from tip of chain;
        repeat :Consider blocks in previous round;
        repeat while (Any block in round has quorum?) is (no)
        :Voting is allowed if last quorum was in\nprevious round or prior to cooldown;
      end group
      if (Is voting allowed in round?) then (yes)
        note left:Does the committee\nmember have to vote in\nthe first slot of the round?
        if (Am I a committee member?) then (yes)
          group Select block
            repeat :Consider each block\nof the preferred chain\nin candidate window;
              if (Have I already\nvoted for the block\nin a previous round?) then (no)
                :Vote for block;
                :Send vote to downstream peers;
                break
              else (yes)
                :Ignore block;
              endif
              note left:Can a committee\nmember vote for any\nblock in the window?\n\nMust they vote for a block\non their preferred chain?\n\nCan they vote for a block\nthey already voted for in a\nprevious round?
            repeat while (More blocks to consider?) is (yes)
          end group
        else (no)
        endif
      else (no)
      endif
    case (Chain received from upstream peer)
    group Measure weight of chain received
      :Initial weight is length of chain;
      while (For each block on chain)
        :Increment weight by\nnumber of votes\ntimes boost;
        note left: So non-quorum votes\ncontribute to the\nweight of the chain?
      endWhile (no more blocks)
    end group
    if (Received chain has more\nweight than preferred chain?) then (yes)
      note left:What should happen\nin the case of a tie?
      :Adopt received chain\nas preferred;
      :Send preferred chain\nto downstream peers;
    else (no)
    endif
    case (Vote received from upstream peer)
      if (Was vote already seen?) then (yes)
        :Ignore duplicate;
        note right:Duplicates are\nnot forwarded\ndownstream
      else (no)
        if (Is the vote an equivocation?) then (yes)
          :Ignore the\nequivocation;
          note left:Equivocations are\nnot forwarded\ndownstream
        else (no)
          :Add to dangling votes;
          :Send vote to\ndownstream peers;
        endif
      endif
  endswitch
endWhile
stop
@enduml
