name: CI
env:
  ALLOWED_URIS: "https://github.com https://api.github.com"
  TRUSTED_PUBLIC_KEYS: "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ="
  SUBSTITUTERS: "https://cache.nixos.org/ https://cache.iog.io"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

on:
  pull_request:
  push:
    branches:
    - main
jobs:
  typecheck:
    name: Build libraries
    runs-on: self-hosted
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
    - name: üõ†Ô∏è Install Nix
      uses: cachix/install-nix-action@v21
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        install_url: https://releases.nixos.org/nix/nix-2.10.3/install
        extra_nix_config: |
          allowed-uris = ${{ env.ALLOWED_URIS }}
          trusted-public-keys = ${{ env.TRUSTED_PUBLIC_KEYS }}
          substituters = ${{ env.SUBSTITUTERS }}
          experimental-features = nix-command flakes
    - name: üèóÔ∏è Typecheck Agda
      run: |
        nix build --show-trace .#peras
    - name: üèóÔ∏è Build `peras-simulation`.
      run: |
        nix build --show-trace .#peras-simulation-test

  simulate-hs:
    name: Run simulations
    runs-on: self-hosted
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
    - name: üõ†Ô∏è Install Nix
      uses: cachix/install-nix-action@v21
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        install_url: https://releases.nixos.org/nix/nix-2.10.3/install
        extra_nix_config: |
          allowed-uris = ${{ env.ALLOWED_URIS }}
          trusted-public-keys = ${{ env.TRUSTED_PUBLIC_KEYS }}
          substituters = ${{ env.SUBSTITUTERS }}
          experimental-features = nix-command flakes
    - name: üó≥Ô∏è Simulate Peras
      run: |
        nix run .#peras-simulate -- \
          --in-file peras-simulation/example-input.yaml \
          --out-file peras-simulation/tmp-output.yaml \
          --trace-file peras-simulation/tmp-trace.jsonarray
        nix run .#peras-visualize -- \
          --trace-file peras-simulation/tmp-trace.jsonarray \
          --dot-file peras-simulation/tmp.dot
  tests:
    if: true
    name: Run tests
    runs-on: self-hosted
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
    - name: üõ†Ô∏è Install Nix
      uses: cachix/install-nix-action@v21
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        install_url: https://releases.nixos.org/nix/nix-2.10.3/install
        extra_nix_config: |
          allowed-uris = ${{ env.ALLOWED_URIS }}
          trusted-public-keys = ${{ env.TRUSTED_PUBLIC_KEYS }}
          substituters = ${{ env.SUBSTITUTERS }}
          experimental-features = nix-command flakes
    - name: üî¨ Test with `peras-hs-test`
      run: |
        nix run .#peras-hs-test
    - name: üî¨ Test with `peras-simulation-test`
      run: |
        nix run .#peras-simulation-test

  test-demo:
    name: Test Demo
    runs-on: self-hosted
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
    - name: üõ†Ô∏è Install Nix
      uses: cachix/install-nix-action@v21
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        install_url: https://releases.nixos.org/nix/nix-2.10.3/install
        extra_nix_config: |
          allowed-uris = ${{ env.ALLOWED_URIS }}
          trusted-public-keys = ${{ env.TRUSTED_PUBLIC_KEYS }}
          substituters = ${{ env.SUBSTITUTERS }}
          experimental-features = nix-command flakes
    - name: üèóÔ∏è Compile Agda
      run: |
        nix build .#test-demo-agda
    - name: üèóÔ∏è Compile Haskell Library
      run: |
        nix build .#test-demo
    - name: üèóÔ∏è Compile Haskell Executable
      run: |
        nix build .#test-demo-test

  build-specification:
    name: Build HTML Specification
    runs-on: self-hosted
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
    - name: üõ†Ô∏è Install Nix
      uses: cachix/install-nix-action@v21
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        install_url: https://releases.nixos.org/nix/nix-2.10.3/install
        extra_nix_config: |
          allowed-uris = ${{ env.ALLOWED_URIS }}
          trusted-public-keys = ${{ env.TRUSTED_PUBLIC_KEYS }}
          substituters = ${{ env.SUBSTITUTERS }}
          experimental-features = nix-command flakes
    - name: üèóÔ∏è Agda-to-HTML
      run: |
        nix develop --command bash -c ".github/workflows/scripts/agda-2-html.sh"
    - name: Publish Docusaurus build
      uses: actions/upload-artifact@v4
      with:
        name: agda-specification
        if-no-files-found: error
        path: |
          html/*

  build-docusaurus:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: site/package-lock.json

      - name: Install dependencies
        working-directory: site
        run: npm ci

      - name: Build Docusaurus site
        working-directory: site
        run: |
          npm run build

      - name: Publish Docusaurus build
        uses: actions/upload-artifact@v4
        with:
          name: docusaurus-build
          if-no-files-found: error
          path: |
            site/build/*

  publish-docs:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    needs:
      - build-docusaurus
    steps:
      - name: Download Docusaurus build
        uses: actions/download-artifact@v4
        with:
          name: docusaurus-build
          path: ./github-pages

      - name: Publish GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN || github.token }}
          publish_dir: ./github-pages
          cname: peras.cardano-scaling.org

  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      #
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME}}:latest
          cache-to: type=inline

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)."
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
