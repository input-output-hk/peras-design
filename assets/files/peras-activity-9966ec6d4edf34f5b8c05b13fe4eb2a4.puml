@startuml
title Peras Activity at the Node
start
while (Exit?)
  switch (Wait for event)
    case (New slot)
      if (Am I a slot leader?) then (yes)
        group Select votes
          repeat :Consider each dangling vote;
            if (Is vote expired?) then (yes)
              :Discard vote;
            else (no)
              if (Is a voting opportunity,\non preferred chain?) then (yes)
                :Add vote to block;
              else (no)
                :Keep as a\ndangling vote;
              endif
            endif
          repeat while (More dangling votes to consider?) is (yes)
        end group
        :Add block to preferred chain;
        :Send preferred chain to downstream peers;
      else (no)
      endif
    case (New round) 
      group (Determine quorums)
        :Iterate from tip of chain;
        repeat :Consider votes in previous round;
        repeat while (Any block in round has quorum?) is (no)
        :Voting is allowed if quorum was in last\nround or a multiple of the cooldown period;
      end group
      if (Is voting allowed in round?) then (yes)
        if (Am I a committee member?) then (yes)
          group Select block
            if (Are there blocks of the preferred\nchain in candidate window?) then (yes)
              :Vote for most recent block;
            else (no)
            endif
          end group
        else (no)
        endif
      else (no)
      endif
    case (Chain received from upstream peer)
    group Measure weight of chain received
      :Initial weight is length of chain;
      while (For each block on chain)
        if (Was the chain in cooldown?) then (no)
          :Increment weight by\nnumber of votes\ntimes boost;
        else (yes)
        endif
      endWhile (no more blocks)
    end group
    if (Received chain has more\nweight than preferred chain?) then (yes)
      :Adopt received chain\nas preferred;
      :Send preferred chain\nto downstream peers;
    else (no)
    endif
    case (Vote received from upstream peer)
      if (Was vote already seen?) then (yes)
        :Ignore duplicate;
      else (no)
        if (Is the vote an equivocation?) then (yes)
          :Ignore the\nequivocation;
        else (no)
          :Add to dangling votes;
          :Send vote to\ndownstream peers;
        endif
      endif
  endswitch
endWhile
stop
@enduml