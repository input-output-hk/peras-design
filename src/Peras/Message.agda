module Peras.Message where

open import Data.String using (String)

open import Data.List using (List)
open import Peras.Block using (Block; BlockBody; Slot)
open import Peras.Chain using (Chain; RoundNumber; Vote)
open import Peras.Crypto using (Hash)

record NodeId : Set where
  constructor MkNodeId
  field
    nodeId : String

open NodeId public

{-# COMPILE AGDA2HS NodeId newtype deriving (Eq, Ord, Read, Show) #-}

-- | Message exchanged between nodes.
--
-- We do not separate messages between inputs and outputs as, by
-- definition, a message /output/ by one node is an /input/ to some
-- other node.  The routing should be handled by the networking layer
-- interposed between all the nodes.
data Message : Set where

  -- | New slot occurs (represents the passage of time)
  -- This is not a message that is sent between nodes, but rather a "control"
  -- message that is generated by the simulation environment.
  NextSlot : Slot → Message

  -- | New chain is received from upstream
  NewChain : Chain → Message

  -- | Some `Vote` is received from upstream or broadcast
  SomeVote : Vote → Message

  -- | Request to fetch some votes
  FetchVotes : List Hash → Message

  -- | Follow upstream chain from some point (could be genesis).
  FollowChain : Hash → Message

  -- | Some new block is added on top of the best chain.
  RollForward : Block → Message

  -- | Peers best chain has been rolled back.
  RollBack : Block → Message

  -- | Request to fetch some blocks
  FetchBlocks : List Hash → Message

  -- | Some Block body as response to `FetchBlocks`
  SomeBlock : BlockBody → Message

{-# COMPILE AGDA2HS Message #-}
