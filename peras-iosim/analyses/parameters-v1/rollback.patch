diff --git a/peras-iosim/src/Peras/IOSim/Protocol.hs b/peras-iosim/src/Peras/IOSim/Protocol.hs
index 91d026d..d640544 100644
--- a/peras-iosim/src/Peras/IOSim/Protocol.hs
+++ b/peras-iosim/src/Peras/IOSim/Protocol.hs
@@ -20,11 +20,12 @@ import Data.Default (Default (def))
 import Data.Function (on)
 import Data.List (partition)
 import Data.Maybe (mapMaybe)
+import Debug.Trace
 import Numeric.Natural (Natural)
 import Peras.Block (Block (Block, includedVotes, signature, slotNumber), Slot)
 import Peras.Chain (Chain (..), asList)
 import Peras.Crypto (Hash (Hash), LeadershipProof (LeadershipProof), Signature (Signature))
-import Peras.IOSim.Node.Types (NodeState, activeVotes, committeeMember, owner, preferredChain, rollbacks, slot, slotLeader, stake)
+import Peras.IOSim.Node.Types (NodeState, activeVotes, committeeMember, owner, preferredChain, rollbacks, slot, slotLeader, stake, nodeId)
 import Peras.IOSim.Protocol.Types (Protocol (..))
 import Peras.IOSim.Types (Coin, Rollback (..), Round, Vote (..), Votes)
 import Peras.Message (Message (NewChain, SomeBlock))
@@ -125,6 +126,7 @@ newChain PseudoPraos{} chain =
       else pure mempty
 newChain protocol@PseudoPeras{votingBoost} chain =
   do
+    myself <- use nodeId
     newVotes <- fmap concat . mapM (newVote protocol) $ asList chain
     let chainLength Genesis = 0
         chainLength (Cons Block{includedVotes} chain') = 1 + chainLength chain' + votingBoost * fromIntegral (S.size includedVotes)
@@ -141,7 +143,7 @@ newChain protocol@PseudoPeras{votingBoost} chain =
                   slots = on (-) fromIntegral (slotNumber $ head suffix) atSlot
                   blocks = length suffix
                  in
-                  rollbacks %= (Rollback{..} :)
+                  trace ("  At slot " <> show atSlot <> " node " <> show myself <> " rolled back " <> show blocks <> " blocks and " <> show slots <> " slots.") $ rollbacks %= (Rollback{..} :)
     if toWeight > fromWeight
       then do
         checkRollback preferred chain
